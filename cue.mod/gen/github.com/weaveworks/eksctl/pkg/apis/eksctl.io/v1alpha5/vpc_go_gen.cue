// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/weaveworks/eksctl/pkg/apis/eksctl.io/v1alpha5

package v1alpha5

import "github.com/weaveworks/eksctl/pkg/utils/ipnet"

// ClusterHighlyAvailableNAT configures a highly available NAT gateway
#ClusterHighlyAvailableNAT: "HighlyAvailable"

// ClusterSingleNAT configures a single NAT gateway
#ClusterSingleNAT: "Single"

// ClusterDisableNAT disables NAT
#ClusterDisableNAT: "Disable"

// (default)
#ClusterNATDefault: "Single"

// AZSubnetMapping holds subnet to AZ mappings.
// If the key is an AZ, that also becomes the name of the subnet
// otherwise use the key to refer to this subnet.
// Schema type is `map[string]AZSubnetSpec`
#AZSubnetMapping: _

#ClusterVPC: {
	// global CIDR and VPC ID
	// +optional
	Network: #Network

	// SecurityGroup (aka the ControlPlaneSecurityGroup) for communication between control plane and nodes
	// +optional
	securityGroup?: string @go(SecurityGroup)

	// Subnets are keyed by AZ for convenience.
	// See [this example](/examples/reusing-iam-and-vpc/)
	// as well as [using existing
	// VPCs](/usage/vpc-networking/#use-existing-vpc-other-custom-configuration).
	// +optional
	subnets?: null | #ClusterSubnets @go(Subnets,*ClusterSubnets)

	// for additional CIDR associations, e.g. a CIDR for
	// private subnets or any ad-hoc subnets
	// +optional
	extraCIDRs?: [...string] @go(ExtraCIDRs,[]string)

	// for additional IPv6 CIDR associations, e.g. a CIDR for
	// private subnets or any ad-hoc subnets
	// +optional
	extraIPv6CIDRs?: [...string] @go(ExtraIPv6CIDRs,[]string)

	// for pre-defined shared node SG
	sharedNodeSecurityGroup?: string @go(SharedNodeSecurityGroup)

	// Automatically add security group rules to and from the default
	// cluster security group and the shared node security group.
	// This allows unmanaged nodes to communicate with the control plane
	// and managed nodes.
	// This option cannot be disabled when using eksctl created security groups.
	// Defaults to `true`
	// +optional
	manageSharedNodeSecurityGroupRules?: null | bool @go(ManageSharedNodeSecurityGroupRules,*bool)

	// AutoAllocateIPV6 requests an IPv6 CIDR block with /56 prefix for the VPC
	// +optional
	autoAllocateIPv6?: null | bool @go(AutoAllocateIPv6,*bool)

	// +optional
	nat?: null | #ClusterNAT @go(NAT,*ClusterNAT)

	// See [managing access to API](/usage/vpc-networking/#managing-access-to-the-kubernetes-api-server-endpoints)
	// +optional
	clusterEndpoints?: null | #ClusterEndpoints @go(ClusterEndpoints,*ClusterEndpoints)

	// PublicAccessCIDRs are which CIDR blocks to allow access to public
	// k8s API endpoint
	// +optional
	publicAccessCIDRs?: [...string] @go(PublicAccessCIDRs,[]string)
}

#ClusterSubnets: {
	private?: #AZSubnetMapping @go(Private)
	public?:  #AZSubnetMapping @go(Public)
}

#SubnetTopology: string // #enumSubnetTopology

#enumSubnetTopology:
	#SubnetTopologyPrivate |
	#SubnetTopologyPublic

#AZSubnetSpec: {
	// +optional
	id?: string @go(ID)

	// AZ is the zone name for this subnet, it can either be an availability zone name
	// or a local zone name.
	// AZ can be omitted if the key is an AZ.
	// +optional
	az?: string @go(AZ)

	// +optional
	cidr?: null | ipnet.#IPNet @go(CIDR,*ipnet.IPNet)
}

#Network: {
	// +optional
	id?: string @go(ID)

	// +optional
	cidr?: null | ipnet.#IPNet @go(CIDR,*ipnet.IPNet)

	// +optional
	ipv6Cidr?: string @go(IPv6Cidr)

	// +optional
	ipv6Pool?: string @go(IPv6Pool)
}

#ClusterNAT: {
	// Valid variants are `ClusterNAT` constants
	gateway?: null | string @go(Gateway,*string)
}

#ClusterEndpoints: {
	privateAccess?: null | bool @go(PrivateAccess,*bool)
	publicAccess?:  null | bool @go(PublicAccess,*bool)
}

// MinRequiredSubnets is the minimum required number of subnets
#MinRequiredSubnets: 2

// OutpostsMinRequiredSubnets is the minimum required number of subnets for Outposts.
#OutpostsMinRequiredSubnets: 1

// MinRequiredAvailabilityZones defines the minimum number of required availability zones
#MinRequiredAvailabilityZones: 2

// RecommendedSubnets is the recommended number of subnets
#RecommendedSubnets: 3

// RecommendedAvailabilityZones defines the default number of required availability zones
#RecommendedAvailabilityZones: 3

// SubnetTopologyPrivate represents privately-routed subnets
#SubnetTopologyPrivate: #SubnetTopology & "Private"

// SubnetTopologyPublic represents publicly-routed subnets
#SubnetTopologyPublic: #SubnetTopology & "Public"
